<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>svn on Inductive Bias</title><link>https://blog.isabel-drost.de/tags/svn/</link><description>Recent content in svn on Inductive Bias</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 25 Feb 2011 20:47:54 +0100</lastBuildDate><atom:link href="https://blog.isabel-drost.de/tags/svn/index.xml" rel="self" type="application/rss+xml"/><item><title>Note to self: svn:ignore usage</title><link>https://blog.isabel-drost.de/note-to-self-svnignore-usage299/</link><pubDate>Fri, 25 Feb 2011 20:47:54 +0100</pubDate><guid>https://blog.isabel-drost.de/note-to-self-svnignore-usage299/</guid><description>Note to self: svn:ignore usage # Putting the information here to make retrieving it a bit easier next time.
When working with svn and some random IDE I&amp;rsquo;d really love to avoid checking in any files that are IDE specific (project configuration, classpath, etc.). The command to do that:
svn propedit svn:ignore $directory_to_edit
After issuing this command you&amp;rsquo;ll be prompted to enter file patterns for files to ignore or the directory names.</description></item><item><title>First steps with git</title><link>https://blog.isabel-drost.de/first-steps-with-git177/</link><pubDate>Sat, 30 Oct 2010 19:47:00 +0200</pubDate><guid>https://blog.isabel-drost.de/first-steps-with-git177/</guid><description>First steps with git # A few weeks ago I started to use git not only for tracking changes in my own private repository but also for Mahout development and for reviewing patches. My setup probably is a bit unusual, so I thought, I&amp;rsquo;d first describe that before diving deeper into the specifc steps.
Workflow to implement
With my development I wanted to follow Mahout trunk very closely, integrating and merging any changes as soon as I continue to work on the code.</description></item><item><title>Converting a git repo to svn</title><link>https://blog.isabel-drost.de/converting-a-git-repo-to-svn144/</link><pubDate>Mon, 17 Aug 2009 10:15:20 +0200</pubDate><guid>https://blog.isabel-drost.de/converting-a-git-repo-to-svn144/</guid><description>Converting a git repo to svn # Pretty unlikely though it may seem, but there are cases when one might want to convert a git repo to svn and still keep all revisions intact. There is a nice explanation online on how to do that in the Google Open Source blog.</description></item><item><title>Keeping changesets small</title><link>https://blog.isabel-drost.de/keeping-changesets-small257/</link><pubDate>Sun, 21 Jun 2009 20:48:19 +0200</pubDate><guid>https://blog.isabel-drost.de/keeping-changesets-small257/</guid><description>Keeping changesets small # One trick of successful and efficient software development is tracking changes in the sources in source code management systems, be it centralized systems like svn or perforce or decentralized systems like git or mercurial. I started working with svn while working on my Diploma thesis project in 2003, continued to use this systems while researcher at HU Berlin. Today I am using svn at work as well as for Apache projects and have come to like git for personal sandboxes.</description></item></channel></rss>