<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>version control on Inductive Bias</title><link>https://blog.isabel-drost.de/tags/version-control/</link><description>Recent content in version control on Inductive Bias</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 30 Oct 2010 19:47:00 +0200</lastBuildDate><atom:link href="https://blog.isabel-drost.de/tags/version-control/index.xml" rel="self" type="application/rss+xml"/><item><title>First steps with git</title><link>https://blog.isabel-drost.de/first-steps-with-git177/</link><pubDate>Sat, 30 Oct 2010 19:47:00 +0200</pubDate><guid>https://blog.isabel-drost.de/first-steps-with-git177/</guid><description>First steps with git # A few weeks ago I started to use git not only for tracking changes in my own private repository but also for Mahout development and for reviewing patches. My setup probably is a bit unusual, so I thought, I&amp;rsquo;d first describe that before diving deeper into the specifc steps.
Workflow to implement
With my development I wanted to follow Mahout trunk very closely, integrating and merging any changes as soon as I continue to work on the code.</description></item></channel></rss>